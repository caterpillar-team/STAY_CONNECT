name: GITHUB ACTION CI/CD WITH AWS

on:
   push:
      branches: [main, develop]
   pull_request:
      branches: [main, develop]

jobs:
   build:
      runs-on: ubuntu-latest

      steps:
         - name: Checkout repository
           uses: actions/checkout@v4

         - name: Set up JDK 21
           uses: actions/setup-java@v4
           with:
              distribution: 'temurin'
              java-version: '21'

         - name: Set up environment variables
           id: setup-env
           uses: ./.github/workflows/create-env.yml

         - name: Load environment variables
           run: |
              echo "${{ steps.setup-env.outputs.env-vars}}" >> .env

         - name: Cache Gradle packages
           uses: actions/cache@v4
           with:
              path: |
                 ~/.gradle/caches
                 ~/.gradle/wrapper
              key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
              restore-keys: |
                 gradle-${{ runner.os }}-

         - name: Grant execute permission for gradlew
           run: chmod +x gradlew

         - name: Build with Gradle
           run: ./gradlew clean build -Dspring.profiles.active=prod -x test

         - name: Upload build artifacts
           uses: actions/upload-artifact@v4
           with:
              name: build-artifacts
              path: build/libs/StayConnect-0.0.2.jar
              retention-days: 1

   deploy:
      # if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      needs: build

      steps:
         - name: Checkout repository
           uses: actions/checkout@v4

         - name: Download build artifacts
           uses: actions/download-artifact@v4
           with:
              name: build-artifacts
              path: build/libs

         - name: Set up environment variables
           id: setup-env
           uses: ./.github/workflows/create-env.yml

         - name: Load environment variables
           run: |
              echo "${{ steps.setup-env.outputs.env-vars}}" >> .env

         - name: Set up JDK 21
           uses: actions/setup-java@v4
           with:
              distribution: 'temurin'
              java-version: '21'

         - name: Set lower-case repository owner
           id: lowercase
           run: echo "::set-output name=repository_owner::$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')"

         - name: Set up QEMU
           uses: docker/setup-qemu-action@v3

         - name: Set up Docker Buildx
           uses: docker/setup-buildx-action@v3

         - name: Log in to GitHub Container Registry
           uses: docker/login-action@v3
           with:
              registry: ghcr.io
              username: ${{ steps.lowercase.outputs.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}

         - name: Build and push Nginx image
           uses: docker/build-push-action@v4
           with:
              context: .
              file: ./docker/dockerfile.nginx
              push: true
              tags: ghcr.io/${{ steps.lowercase.outputs.repository_owner }}/stay_connect_nginx:latest

         - name: Build and push Spring Boot image
           uses: docker/build-push-action@v4
           with:
              context: .
              file: ./docker/dockerfile.springboot
              push: true
              tags: ghcr.io/${{ steps.lowercase.outputs.repository_owner }}/stay_connect_app:latest

         - name: Build and push certbot image
           uses: docker/build-push-action@v4
           with:
              context: .
              file: ./docker/dockerfile.certbot
              push: true
              tags: ghcr.io/${{ steps.lowercase.outputs.repository_owner }}/stay_connect_certbot:latest

         - name: Transfer docker-compose-prod.yml to EC2 using SCP
           uses: appleboy/scp-action@master
           with:
              host: ${{ secrets.EC2_HOST }}
              username: ${{ secrets.EC2_USER }}
              key: ${{ secrets.EC2_SSH_KEY }}
              port: ${{ secrets.EC2_PORT }}
              source: ./docker/docker-compose-prod.yml
              target: /home/${{ secrets.EC2_USER }}

         - name: Transfer .env to EC2 using SCP
           uses: appleboy/scp-action@master
           with:
              host: ${{ secrets.EC2_HOST }}
              username: ${{ secrets.EC2_USER }}
              key: ${{ secrets.EC2_SSH_KEY }}
              port: ${{ secrets.EC2_PORT }}
              source: .env
              target: /home/${{ secrets.EC2_USER }}

         - name: Transfer init-letsencrypt.sh to EC2 using SCP
           uses: appleboy/scp-action@master
           with:
              host: ${{ secrets.EC2_HOST }}
              username: ${{ secrets.EC2_USER }}
              key: ${{ secrets.EC2_SSH_KEY }}
              port: ${{ secrets.EC2_PORT }}
              source: init-letsencrypt.sh
              target: /home/${{ secrets.EC2_USER }}

         - name: SSH and deploy to EC2
           uses: appleboy/ssh-action@master
           with:
              host: ${{ secrets.EC2_HOST }}
              username: ${{ secrets.EC2_USER }}
              key: ${{ secrets.EC2_SSH_KEY }}
              port: ${{ secrets.EC2_PORT }}
              script: |
                 if [ -f /home/${{ secrets.EC2_USER }}/docker/docker-compose-prod.yml ]; then
                   echo "File exists"
                   chmod 644 /home/${{ secrets.EC2_USER }}/docker/docker-compose-prod.yml
                   chmod +x init-letsencrypt.sh
                 else
                   echo "File does not exist"
                   exit 1
                 fi
                 docker-compose --env-file /home/${{ secrets.EC2_USER }}/.env -f /home/${{ secrets.EC2_USER }}/docker/docker-compose-prod.yml down
                 docker stop $(docker ps -aq)
                 docker rm $(docker ps -aq)
                 docker rmi -f $(docker images -q)
                 docker-compose --env-file /home/${{ secrets.EC2_USER }}/.env -f /home/${{ secrets.EC2_USER }}/docker/docker-compose-prod.yml pull
                 docker-compose --env-file /home/${{ secrets.EC2_USER }}/.env -f /home/${{ secrets.EC2_USER }}/docker/docker-compose-prod.yml up -d

   clear:
      runs-on: ubuntu-latest
      needs: [deploy, build]
      steps:
         - name: Delete Artifact
           uses: geekyeggo/delete-artifact@v5
           with:
              name: |
                 *

   dependency-submission:
      runs-on: ubuntu-latest
      permissions:
         contents: write

      steps:
         - uses: actions/checkout@v4
         - name: Set up JDK 21
           uses: actions/setup-java@v4
           with:
              java-version: '21'
              distribution: 'temurin'

         - name: Generate and submit dependency graph
           uses: gradle/actions/dependency-submission@v4.0.0
